{"ast":null,"code":"import _objectSpread from \"/Users/albertliu/Desktop/ReactJS/dailyplanningplatform/FrontEnd/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/albertliu/Desktop/ReactJS/dailyplanningplatform/FrontEnd/src/HeaderBarComponents/Reminders.js\";\nimport React, { Component } from 'react';\nimport ReminderList from '../Resources/ReminderList.js';\nimport Reminder from './Reminder.js';\nimport Style from './Header.css';\nexport default class Reminders extends Component {\n  constructor() {\n    super();\n    this.state = {\n      reminders: ReminderList,\n      slideIndex: 1\n    };\n  }\n\n  render() {\n    const appearingdisplay = {\n      display: \"block\",\n      width: \"100%\",\n      height: \"100%\"\n    };\n    const dissapearingdisplay = {\n      display: \"none\",\n      width: \"100%\",\n      height: \"100%\"\n    };\n    const slideShowButtonStyle = {\n      margin: \"0px\",\n      border: \"0px\",\n      padding: \"0px\"\n    };\n    console.log(\"Display slide #\" + this.state.slideIndex);\n    const components = this.state.reminders.map(reminder => {\n      return React.createElement(\"div\", {\n        className: \"rem\",\n        style: reminder.id === this.state.slideIndex ? appearingdisplay : dissapearingdisplay,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(Reminder, {\n        reminder: reminder,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"Reminder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"slide_show\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"slide_show_button_div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"slide_show_button\",\n      onClick: () => this.setSlideIdx(-1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"<\")), React.createElement(\"div\", {\n      className: \"actualSlides\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, components), React.createElement(\"div\", {\n      className: \"slide_show_button_div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"slide_show_button\",\n      onClick: () => this.setSlideIdx(1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \">\"))));\n  } /// change the slide index appropriatly based on what is passed into the parameter, \n  /// if the parameter is positive integer, then move right, \n  /// if the parameter is negative integer, move left, \n  /// if the index is smaller than 1 after integerating the param, rotate to the end, \n  /// if the index is bigger than the length after integrating the param, rotate to the beginning. \n  /// Update the state\n\n\n  setSlideIdx(n) {\n    let newidx = this.state.slideIndex + n;\n\n    if (newidx > this.state.reminders.length) // rotate back to slide one\n      {\n        console.log(\"rotate to slide one\");\n        newidx = 1;\n      }\n\n    if (newidx < 1) // rotate to the last slide\n      {\n        console.log(\"rotate to last slide\");\n        newidx = this.state.reminders.length;\n      }\n\n    this.setState(() => {\n      console.log(\"displaying slide #\" + newidx);\n      return _objectSpread({}, this.state.reminders, {\n        \"slideIndex\": newidx\n      });\n    });\n  }\n  /*\n      // set the state\n      plusDivs(n) {\n          this.setState((prevState) => { return { ...reminders, \"slideIndex\": prevState.slideIndex + n } }); // increment the state slide index\n          this.showDivs(this.state.slideIndex);\n      }\n  \n      showDivs(n) {\n          let reminders = Array.prototype.slice.call(document.getElementsByClassName(\"rem\"));\n          //  // .map((comp) => { if (comp.className === \"rem\") return comp})\n          console.log(\"reminders :  \\n\" + reminders.length); \n          \n          if (n > reminders.length) // rotate back to slide one\n          {\n              this.setState(() => { console.log(\"rotate to slide one\"); return { \"slideIndex\": 1 } }); \n          } \n  \n          if (n < 1) // rotate to the last slide\n          {\n              this.setState(() => { console.log(\"rotate to last slide\"); return { \"slideIndex\": reminders.length } }); \n          }\n          \n          reminders.forEach((reminder) => {  // turn off the display for all slides\n              console.log(\" display off for \" + reminder);\n              reminder.style.display = \"none\";\n          })  \n  \n          reminders[this.state.slideIndex - 1].style.display = \"block\";\n      }\n  */\n\n\n}","map":{"version":3,"sources":["/Users/albertliu/Desktop/ReactJS/dailyplanningplatform/FrontEnd/src/HeaderBarComponents/Reminders.js"],"names":["React","Component","ReminderList","Reminder","Style","Reminders","constructor","state","reminders","slideIndex","render","appearingdisplay","display","width","height","dissapearingdisplay","slideShowButtonStyle","margin","border","padding","console","log","components","map","reminder","id","setSlideIdx","n","newidx","length","setState"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReminderList from '../Resources/ReminderList.js'; \nimport Reminder from './Reminder.js'; \nimport Style from './Header.css'; \n\nexport default class Reminders extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            reminders: ReminderList, \n            slideIndex: 1\n        }        \n    }\n\n\n    render() {\n\n        const appearingdisplay = {\n            display: \"block\", \n            width: \"100%\", \n            height: \"100%\", \n            \n        }\n\n        const dissapearingdisplay = {\n            display: \"none\",\n            width: \"100%\", \n            height: \"100%\"\n        }\n\n        const slideShowButtonStyle = {\n            margin: \"0px\",\n            border: \"0px\",\n            padding: \"0px\" \n        }\n\n        console.log(\"Display slide #\" + this.state.slideIndex); \n        const components = this.state.reminders.map(\n            (reminder) => {\n                return (\n                    <div className=\"rem\" style={reminder.id === this.state.slideIndex ? appearingdisplay : dissapearingdisplay} >\n                        <Reminder reminder={reminder} />\n                    </div>\n                )\n            }\n        )\n\n        return (\n            <div className=\"Reminder\">\n                <div className=\"slide_show\">\n                    <div className=\"slide_show_button_div\"> \n                        <button className=\"slide_show_button\" onClick={() => this.setSlideIdx(-1)}>{\"<\"}</button>\n                    </div>\n                    <div className=\"actualSlides\">\n                        {components}\n                    </div>\n                    <div className=\"slide_show_button_div\">\n                        <button className=\"slide_show_button\" onClick={() => this.setSlideIdx(1)}>{\">\"}</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n\n    /// change the slide index appropriatly based on what is passed into the parameter, \n    /// if the parameter is positive integer, then move right, \n    /// if the parameter is negative integer, move left, \n    /// if the index is smaller than 1 after integerating the param, rotate to the end, \n    /// if the index is bigger than the length after integrating the param, rotate to the beginning. \n    /// Update the state\n    setSlideIdx(n) {\n        let newidx = this.state.slideIndex + n;\n\n        if (newidx > this.state.reminders.length) // rotate back to slide one\n        {\n            console.log(\"rotate to slide one\");\n            newidx = 1;\n        }\n\n        if (newidx < 1) // rotate to the last slide\n        {\n            console.log(\"rotate to last slide\");\n            newidx = this.state.reminders.length; \n        }\n\n        this.setState(() => { console.log(\"displaying slide #\" + newidx); return { ...this.state.reminders, \"slideIndex\": newidx } });\n    }\n\n\n\n/*\n    // set the state\n    plusDivs(n) {\n        this.setState((prevState) => { return { ...reminders, \"slideIndex\": prevState.slideIndex + n } }); // increment the state slide index\n        this.showDivs(this.state.slideIndex);\n    }\n\n    showDivs(n) {\n        let reminders = Array.prototype.slice.call(document.getElementsByClassName(\"rem\"));\n        //  // .map((comp) => { if (comp.className === \"rem\") return comp})\n        console.log(\"reminders :  \\n\" + reminders.length); \n        \n        if (n > reminders.length) // rotate back to slide one\n        {\n            this.setState(() => { console.log(\"rotate to slide one\"); return { \"slideIndex\": 1 } }); \n        } \n\n        if (n < 1) // rotate to the last slide\n        {\n            this.setState(() => { console.log(\"rotate to last slide\"); return { \"slideIndex\": reminders.length } }); \n        }\n        \n        reminders.forEach((reminder) => {  // turn off the display for all slides\n            console.log(\" display off for \" + reminder);\n            reminder.style.display = \"none\";\n        })  \n\n        reminders[this.state.slideIndex - 1].style.display = \"block\";\n    }\n*/\n\n}\n"]},"metadata":{},"sourceType":"module"}