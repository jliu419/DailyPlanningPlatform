{"ast":null,"code":"var _jsxFileName = \"/Users/albertliu/Desktop/ReactJS/dailyplanningplatform/FrontEnd/src/HeaderBarComponents/Time.js\";\nimport React, { Component } from 'react';\nimport Style from './Header.css';\nexport default class Time extends Component {\n  constructor() {\n    super();\n    this.state = {\n      \"time\": null\n    };\n  } // return in brief case if the expected result is to be brief way \n  // of writing the month in english, ex: Jan is brief, January is not brief\n\n\n  convertMonthToStr(monthnum, isBrief) {\n    switch (monthnum + 1) {\n      case 1:\n        return isBrief ? \"Jan\" : \"January\";\n\n      case 2:\n        return isBrief ? \"Feb\" : \"Febuary\";\n\n      case 3:\n        return isBrief ? \"Mar\" : \"March\";\n\n      case 4:\n        return isBrief ? \"Apr\" : \"April\";\n\n      case 5:\n        return \"May\";\n\n      case 6:\n        return \"June\";\n\n      case 7:\n        return \"July\";\n\n      case 8:\n        return isBrief ? \"Aug\" : \"August\";\n\n      case 9:\n        return isBrief ? \"Sept\" : \"September\";\n\n      case 10:\n        return isBrief ? \"Oct\" : \"October\";\n\n      case 11:\n        return isBrief ? \"Nov\" : \"November\";\n\n      case 12:\n        return isBrief ? \"Dec\" : \"December\";\n\n      default:\n        console.log(\"the unknown month is: \" + monthnum);\n        return \"Unknown Month\";\n    }\n  } // return in brief case if the expected result is to be brief way \n  // of writing the day of the week in english, ex: Wed is brief, Wednesday is not brief\n\n\n  convertDayToStr(daynum, isBrief) {\n    switch (daynum) {\n      case 1:\n        return isBrief ? \"MO\" : \"Monday\";\n\n      case 2:\n        return isBrief ? \"TU\" : \"Tuesday\";\n\n      case 3:\n        return isBrief ? \"WE\" : \"Wednesday\";\n\n      case 4:\n        return isBrief ? \"TH\" : \"Thursday\";\n\n      case 5:\n        return isBrief ? \"FR\" : \"Friday\";\n\n      case 6:\n        return isBrief ? \"SA\" : \"Saturday\";\n\n      case 0:\n        return isBrief ? \"SU\" : \"Sunday\";\n\n      default:\n        console.log(\"the unknown Day is: \" + daynum);\n        return \"Unknown Day\";\n    }\n  } // get the current time zone\n\n\n  getCurrentTimeZone(d) {\n    return /\\((.*)\\)/.exec(d.toString())[1];\n  } // take the first letter of each word\n\n\n  takeInitials(words) {\n    const wordlist = words.split(\" \");\n    const initial = wordlist.map(word => word.charAt(0));\n    return initial.toString().replace(/,/g, \"\").toUpperCase();\n  }\n  /****\n   * The time has just mounted, so wait for one second before setting the new time\n   */\n\n\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      return this.setState({\n        \"time\": Date.now()\n      });\n    }, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    const d = new Date(this.state.time);\n    return React.createElement(\"div\", {\n      className: \"Time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"DayDateYear\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.convertDayToStr(d.getDay(), false) + \" \" + this.convertMonthToStr(d.getMonth(), true) + \" \" + d.getDate() + \"th \" + d.getFullYear() + \" \", \" \"), React.createElement(\"h1\", {\n      className: \"HourMinSec\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds() + \" \" + this.takeInitials(this.getCurrentTimeZone(d))));\n  }\n\n}","map":{"version":3,"sources":["/Users/albertliu/Desktop/ReactJS/dailyplanningplatform/FrontEnd/src/HeaderBarComponents/Time.js"],"names":["React","Component","Style","Time","constructor","state","convertMonthToStr","monthnum","isBrief","console","log","convertDayToStr","daynum","getCurrentTimeZone","d","exec","toString","takeInitials","words","wordlist","split","initial","map","word","charAt","replace","toUpperCase","componentDidMount","interval","setInterval","setState","Date","now","componentWillUnmount","clearInterval","render","time","getDay","getMonth","getDate","getFullYear","getHours","getMinutes","getSeconds"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Style from './Header.css'; \n\nexport default class Time extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            \"time\": null\n        }\n    }\n\n    // return in brief case if the expected result is to be brief way \n    // of writing the month in english, ex: Jan is brief, January is not brief\n    convertMonthToStr(monthnum, isBrief) {  \n        switch (monthnum + 1) {\n            case 1:\n                return isBrief ? \"Jan\" : \"January\"; \n            case 2:\n                return isBrief ? \"Feb\" : \"Febuary\"; \n            case 3:\n                return isBrief ? \"Mar\" : \"March\"; \n            case 4:\n                return isBrief ? \"Apr\" : \"April\";\n            case 5:\n                return \"May\"; \n            case 6:\n                return \"June\"; \n            case 7:\n                return \"July\"; \n            case 8:\n                return isBrief ? \"Aug\" : \"August\";\n            case 9:\n                return isBrief ? \"Sept\" : \"September\"; \n            case 10:\n                return isBrief ? \"Oct\" : \"October\"; \n            case 11:\n                return isBrief ? \"Nov\" : \"November\";\n            case 12:\n                return isBrief ? \"Dec\" : \"December\"; \n            default:\n                console.log(\"the unknown month is: \" + monthnum); \n                return \"Unknown Month\"; \n        }\n    }\n\n    // return in brief case if the expected result is to be brief way \n    // of writing the day of the week in english, ex: Wed is brief, Wednesday is not brief\n    convertDayToStr(daynum, isBrief) {\n        switch (daynum) {\n            case 1:\n                return isBrief ? \"MO\" : \"Monday\";\n            case 2:\n                return isBrief ? \"TU\" : \"Tuesday\";\n            case 3:\n                return isBrief ? \"WE\" : \"Wednesday\";\n            case 4:\n                return isBrief ? \"TH\" : \"Thursday\";\n            case 5:\n                return isBrief ? \"FR\" : \"Friday\";\n            case 6:\n                return isBrief ? \"SA\" : \"Saturday\";\n            case 0:\n                return isBrief ? \"SU\" : \"Sunday\";\n            default:\n                console.log(\"the unknown Day is: \" + daynum); \n                return \"Unknown Day\";\n        }\n    }\n\n    // get the current time zone\n    getCurrentTimeZone(d) {\n        return /\\((.*)\\)/.exec(d.toString())[1]; \n    }\n\n    // take the first letter of each word\n    takeInitials(words) {\n        const wordlist = words.split(\" \"); \n        const initial = wordlist.map((word) => word.charAt(0));\n        return initial.toString().replace(/,/g, \"\").toUpperCase(); \n    }\n\n    /****\n     * The time has just mounted, so wait for one second before setting the new time\n     */\n    componentDidMount() {\n        this.interval = setInterval(() => {return this.setState({ \"time\": Date.now() }); }, 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        const d = new Date(this.state.time); \n\n        return (\n            <div className=\"Time\">\n                <h1 className=\"DayDateYear\">{this.convertDayToStr(d.getDay(), false) + \" \" + this.convertMonthToStr(d.getMonth(), true) + \" \" +\n                    d.getDate() + \"th \" + d.getFullYear() + \" \"} </h1> \n                <h1 className=\"HourMinSec\">{d.getHours() + \":\" + d.getMinutes() + \":\" + d.getSeconds() + \" \" + this.takeInitials(this.getCurrentTimeZone(d))}</h1>\n            </div>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}